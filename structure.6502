\ "Structured assembly" macros for beebasm with stack support
\ Ideas based on http://wilsonminesco.com/StructureMacros/index.html

\ Constants used to implement "compiler security", i.e. detection of mismatched
\ control macros.
structure_start = 0
structure_if = 1
structure_else = 2
structure_begin = 3
structure_while = 4

macro branch_equb byte
	if byte < -128 or byte > 127
		error Branch out of range
	endif
	equb byte
endmacro

macro xstart
	\ TODO: We wouldn't need this if we had a way to test for an empty stack in xend
	push structure_security, structure_start
endmacro

macro xif_common
	push structure_security, structure_if

	push structure_addr, P% - 2
	clear P% - 1, P%
endmacro

macro xif_eq
	bne P%
	xif_common
endmacro

macro xif_ne
	beq P%
	xif_common
endmacro

macro xif_cc
	bcs P%
	xif_common
endmacro

macro xif_cs
	bcc P%
	xif_common
endmacro

macro xif_mi
	bpl P%
	xif_common
endmacro

macro xif_pl
	bmi P%
	xif_common
endmacro

macro xif_vc
	bvs P%
	xif_common
endmacro

macro xif_vs
	bvc P%
	xif_common
endmacro

macro xelse
	assert structure_security == structure_if
	pop structure_security
	push structure_security, structure_else

	\ Patch up the previously-assembled branch to have a target immediately after
	\ the JMP we're about to assemble
	current_P% = P%
	org structure_addr + 1 \ branch offset in 'if' branch instruction
	branch_equb ((current_P% + 3) - (P% + 1))
	pop structure_addr

	\ Assemble a JMP whose target will be patched up to the corresponding xendif
	org current_P%
	push structure_addr, P%
	jmp &0000
	clear P% - 2, P%
endmacro

macro xendif
	assert structure_security == structure_if or structure_security == structure_else

	if structure_security == structure_if
		\ Patch up the previously-assembled branch to have a target here.
		current_P% = P%
		org structure_addr + 1 \ branch offset in 'if' branch instruction
		branch_equb (current_P% - (P% + 1))
		org current_P%
	else
		\ Patch up the previously-assembled jmp to have a target here.
		current_P% = P%
		org structure_addr + 1
		equw current_P%
		org current_P%
	endif

	pop structure_addr
	pop structure_security
endmacro

macro xbegin
	push structure_security, structure_begin
	push structure_addr, P%
endmacro

macro xuntil_eq
	assert structure_security == structure_begin
	pop structure_security

	bne structure_addr
	pop structure_addr
endmacro

macro xuntil_ne
	assert structure_security == structure_begin
	pop structure_security

	beq structure_addr
	pop structure_addr
endmacro

macro xuntil_cc
	assert structure_security == structure_begin
	pop structure_security

	bcs structure_addr
	pop structure_addr
endmacro

macro xuntil_cs
	assert structure_security == structure_begin
	pop structure_security

	bcc structure_addr
	pop structure_addr
endmacro

macro xuntil_mi
	assert structure_security == structure_begin
	pop structure_security

	bpl structure_addr
	pop structure_addr
endmacro

macro xuntil_pl
	assert structure_security == structure_begin
	pop structure_security

	bmi structure_addr
	pop structure_addr
endmacro

macro xuntil_vc
	assert structure_security == structure_begin
	pop structure_security

	bvs structure_addr
	pop structure_addr
endmacro

macro xuntil_vs
	assert structure_security == structure_begin
	pop structure_security

	bvc structure_addr
	pop structure_addr
endmacro

macro xagain
	assert structure_security == structure_begin
	pop structure_security

	jmp structure_addr
	pop structure_addr
endmacro

macro xwhile_common
	assert structure_security == structure_begin
	pop structure_security
	push structure_security, structure_while

	push structure_addr, P% - 2
	clear P% - 1, P%
endmacro

macro xwhile_eq
	bne P%
	xwhile_common
endmacro

macro xwhile_ne
	beq P%
	xwhile_common
endmacro

macro xwhile_cc
	bcs P%
	xwhile_common
endmacro

macro xwhile_cs
	bcc P%
	xwhile_common
endmacro

macro xwhile_mi
	bpl P%
	xwhile_common
endmacro

macro xwhile_pl
	bmi P%
	xwhile_common
endmacro

macro xwhile_vc
	bvs P%
	xwhile_common
endmacro

macro xwhile_vs
	bvc P%
	xwhile_common
endmacro

macro xendwhile
	assert structure_security = structure_while
	pop structure_security

	while_branch_addr = structure_addr
	pop structure_addr
	begin_addr = structure_addr
	pop structure_addr

	jmp begin_addr

	\ Patch up the previously-assembled branch to have a target here.
	current_P% = P%
	org while_branch_addr + 1 \ branch offset in 'while' branch instruction
	branch_equb (current_P% - (P% + 1))
	org current_P%
endmacro

macro xend
	if structure_security != structure_start
		error Unclosed control structure(s)
	endif
endmacro
